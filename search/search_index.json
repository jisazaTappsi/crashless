{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Crashless","text":"<p>Crash proof your code</p> <p>Crashless enables you to catch those pesky bugs during backend development and correct them in real-time. Makes your development cycle smooth, so you can actually focus on building what actually matters.</p>"},{"location":"#installation","title":"Installation","text":"<p>Crashless is published as a Python package and can be installed with pip, ideally by using a virtual environment. Open up a terminal and install Crashless with:</p> <pre><code>pip install crashless\n</code></pre>"},{"location":"#add-to-fastapi-in-3-steps","title":"Add to FastAPI in 3 steps","text":"<ol> <li> <p>Copy and paste the following server with a crashed endpoint to a file called <code>main.py</code>:</p> <pre><code>from fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/\")\ndef read_root():\n    return {\"message\": \"The server is running OK!\"}\n\n@app.get(\"/crash\")  # This endpoint has a fatal bug :(\ndef crash():\n    result = 8 + '7'\n    return {'msg': f\"Summing a+b = {result}\"}\n\n# Adds Crashless\nimport sys\nfrom crashless import fastapi_handler  # Imports library\n\ndef in_dev_mode():\n    \"\"\"Knows if you are running in production or development mode\"\"\"\n    return sys.argv[1] == 'dev'\n\nif in_dev_mode():  # If in dev mode adds an exception handler, that will suggest a possible fix.\n    app.add_exception_handler(Exception, fastapi_handler.handle_exception)\n</code></pre> <p>As you can see the <code>/crash</code> endpoint has an issue.</p> </li> <li> <p>Run the server with:</p> <pre><code>fastapi dev main.py\n</code></pre> <p>If you don't have the fastapi command follow instructions here.</p> </li> <li> <p>Go to http://127.0.0.1:8000 and check that it's running OK.</p> <p>Then go to http://127.0.0.1:8000/crash and see how it crashes.</p> <p>Now go to the terminal, where the server is running, and you'll see something like this:</p> <pre><code>TypeError: unsupported operand type(s) for +: 'int' and 'str'\n\nCrashless detected an error, let's fix it!\nLoading possible solution...\nThe following code changes will be applied:\n\n @app.get(\"/crash\")  # This endpoint has a fatal bug :(\n def crash():\n-    result = 8 + '7'\n+    result = 8 + int('7')\n return {'msg': f\"Summing a+b = {result}\"}\n\nExplanation: The error occurred because you cannot add an integer and a string directly. The fix converts the string '7' to\nan integer using int('7') before performing the addition.\n</code></pre> </li> </ol> <p>You can apply changes by ENTERING a <code>y</code>. The changes will take place and the api reloads. If you try again you get 15!</p>"},{"location":"#add-to-django-in-3-steps","title":"Add to Django in 3 steps","text":"<p>coming soon!</p>"},{"location":"#add-to-flask-in-3-steps","title":"Add to Flask in 3 steps","text":"<p>coming soon!</p>"},{"location":"#links","title":"Links","text":"<p>Source Code: https://github.com/jisazaTappsi/crashless</p> <p>Python library: https://pypi.org/project/crashless/</p>"}]}